[{"title":"SteamingLLM","url":"/post/17847744.html","content":"只会开新坑不会填旧坑的屑Mr.Xau🕊️🕊️🕊️ 又打算分享一篇基于KV\r\nCache优化经典工作\r\n本人近期任务太多以后一定会填坑的（下次一定\r\n🥺🥺🥺🥺🥺🥺🥺🥺🥺🥺🥺🥺🥺🥺🥺🥺🥺\r\n🤓🤓🤓🤓🤓 已填坑完成！ 🤓🤓🤓🤓🤓\r\nStreamLLM\r\n基于注意力汇聚现象的KV Cache策略\r\n论文地址，Streaming这个词很有意思，不是我们玩的steam\r\n，它可以是喷射的意思，也可以是涓涓细流的意思；我觉得从这篇工作的内容来看，翻译为娟娟溪流可能更加合适一点。那么这个娟娟细流到底指的是LLM中的什么，但是正所谓铁打的衙门流水的官,KV\r\nCache中有没有铁打不变的东西呢？且听后文分析。\r\n知识补充\r\n主要是KV Cache的介绍：什么是KV Cache，为什么只缓存KV？\r\n什么是KV Cache？\r\n回忆一下Transformer中的注意力机制，在经典的Transformer中我们有向量化的语料输入Tokens序列，如果batch size=1， 的形状是 ，其中是输入序列的长度 一句话单词数\r\n， 是给每个单词的编码向量的维度\r\n;经过注意力编码之后有（暂时以一个头的注意力为例子）：\r\n\r\n我们通过这个编码之后的矩阵，可以计算输出的注意力分数：\r\n\r\n我们把展开写看看：\r\n\r\n如果采用仅解码器的架构，由于掩码的存在，会有：\r\n\r\n我们都知道每次LLM会将上一次输出的一个token放在下次输入的最后一个，那么下一轮的注意力分数是：\r\n\r\n显然因为掩码的存在，注意力分数变成了一个下三角矩阵，因此当我们产生了新的tokens的时候，只需要计算最新tokens的q查询向量和即可；这样的结构我们很自然就能想到，每次LLM进行推理的时候将之前的都缓存起来，下次计算注意力分数的时候便无须再次重新计算了；\r\n从上面的公式的形状，我们也不难发现，完全没有必要缓存矩阵，因为每次下三角矩阵扩展的时候都只用到了这一列，所以，之前计算的对于后面的计算是没有作用的我们可以完全舍弃以节省显存开销。\r\nKV Cache有什么问题\r\n随着输入序列的增加，如果缓存所有的矩阵，那么对显存的需求将会二次上升。这就要求我们设计高效的KV\r\nCache的动态调整策略。详细的KV Cache大小估算公式可以参考附录。\r\n这篇工作为什么叫StreamLLM，我的理解是因为即使随着对轮对话的进行，上下文越来越长，StreamLLM也能够基于注意力汇聚这一现象合理的关键的初始和一定上文窗口的cache来使得即使上下文增长也能像涓涓细流一样稳定流畅的推理。\r\nStreamLLM 的原理\r\n一些解决方式的对比🥵🥵🥵\r\n为了解决上文中提及的KV\r\ncache“爆炸”的现象，我们对比一些cache的策略：\r\n（a）最原始的解决“Dense Attention”\r\n所谓dense attention就是将所有的KV键值对全部存储起来\r\n\r\n\r\n\r\n这样存储不仅整体运算时间会达到，而且一旦tokens的数量超过了训练时候的最大长度，模型效果也会很差(用困惑度PPL来衡量，PPL越大模型效果越差)\r\n（b）自然而然想到的“windows attention”窗口注意力机制\r\n所谓窗口注意力机制即只缓存窗口长度为L的K值，如下图所示：\r\n\r\n\r\n\r\n这种窗口注意力机制能够将计算量降至，但是模型表现并不好（指困惑度很高\r\n（c）滑动窗口注意力机制“slide attention”\r\n\r\n\r\n\r\n所谓滑动窗口注意力的计算复杂度也是不可取的。\r\nStreamingLLM 技术和表现\r\n文中提出的StreamingLLM技术，保留了“下沉注意力”部分，又结合了最近的几个token的K值，就像下图所展示的一样。\r\n\r\n\r\n\r\n注：文中所说的保留“下沉注意力”是为了注意力分数的稳定计算。\r\n\r\n关于为什么会出现“注意力下沉”，以及为什么注意力下沉会出现在初始的token上，一种直观上的解释是：\r\n\r\n\r\n有很多token其实和前文关系都不大，但是在softmax操作中的归一化操作又必须保证注意力分数加和等于1；\r\n并且这其中又恰好只有初始的token才能被绝大多数后面的token看到.\r\n所以直观上注意力分数就应当会下沉于初始的token上； \r\n基于这些想法，我们就可以设计一个在有限窗口长度上训练的LLM有效的用于无限文本输入。\r\n实验验证 “attention sink”\r\n现象\r\n如下图所示，下图是256个句子在LLaMa-2-7B上测试的平均注意力分数的热力图；很明显，注意力分布主要集中于recent tokens以及注意力下沉的initial token；\r\n\r\n\r\n\r\n以及在不同LLM上对不同策略的PPL测试结果：\r\n\r\n\r\n\r\n\r\n蓑鱿剪切线\r\n\r\n进一步探讨为什么窗口注意力会出现性能崩溃🧐🧐🧐\r\n在上图中已经展示过，当输入文本长度超过KV\r\nCache的长度之后，PPL会出现激增现象。这恰好又从反面印证了：无论initial\r\ntokens距离当下的token距离有多远，他们对当下token注意力分数的影响都是重要的。\r\n从softmax函数的特性说起\r\n为什么initial token如此重要比较直观的，考虑softmax函数：\r\n\r\n如果直接移除initial token，也就是公式中的，那么会导致大额注意力分数的重新分配，这必然会导致LLM的不稳定。\r\ninitial\r\ntokens重要的原因？语义信息or绝对位置？\r\n设计一个对比实验，将原本文本的initial\r\ntokens全部替换成\"\\n\"，会导致什么后果？\r\n\r\n\r\n\r\n结果并不出乎意料：替换之后的initial\r\ntokens依旧维持着高注意力分数，这意味着并不是initial\r\ntokens的语义信息让它们如此重要，它们重要的原因在于它们的初始的绝对位置。\r\n一些附加实验\r\n同样，作者还探究了initial tokens数量的选取对LLM效果的影响。\r\n\r\n\r\n\r\n不难发现选取1、2个initial\r\ntokens有时并不足以完全恢复LLM的效果。作者推测这是由于训练时候的预料并没有选取固定的开头前缀所导致的必然后果。\r\n可能的替代解决方案\r\nsoftmax_off_by_one函数\r\n通过前文通篇的分析，我们不难得知：softmax函数的特性倾向于将注意力分数分配给全局可见的initial tokens，基于这点出发我们可以考虑将softmax进行改进，将其改写为：\r\n\r\n这样改写等价于我们蓄意将一部分注意力分数提前拿出来进行sink。\r\n附录\r\nto be continue\r\n\r\n\r\n\r\n","categories":["学术"],"tags":["大模型加速","KV Cache 优化"]},{"title":"GEAR:KV cache压缩框架精读","url":"/post/9b786805.html","content":"GEAR:\r\n一種高效的近乎無損推理的LLM的 KV cache 壓縮策略\r\n論文地址在這裡GEAR: An\r\nEffective KV Cache Compression Recipe for Near-Lossless Generative\r\nInference of LLM\r\n研究背景\r\n原文中作者總結了現在階段為了解決GPU Memory問題的流行的幾種方法:\r\n(a)使用offload技術,通過將GPU的內存消耗轉移到CPU使用的內存or\r\nNVMe的存儲空間上.這種方式對總線帶寬(bandwidth)需求極大\r\n(b)緊接著提出來的是tokens dropping技術(比如我們上一篇文章StreamLLM也屬於這一類),這類方法屬於是利用注意力分佈的稀疏性,將註意力分數低下的tokens捨棄達到降低顯存消耗的目的.\r\n(c)另一種經常使用的量化技術(quantization),通過將全精度的數據轉化為半精度的數據進行存儲來降低顯存消耗.\r\n上述的三種方法:(a)會依賴於總線的帶寬來達到GPU和CPU之間高速的數據傳送.(b),(c)兩種方式雖然在絕大部分任務中都能高效的降低顯存佔用,並且對推理效果的損失也極低;但是在復雜的生成式任務中(比如涉及邏輯推理,解決數理問題)這兩種方法都存在普遍且明顯的效能損失.\r\n在較為簡單的任務中,模型只需要產生少數tokens從少數特定的上下文中就可以完整正確的自回歸任務.然而,在複雜的任務中,通常需要模型依據大量相關的上下文tokens產生更長更多的tokens;然而自回歸的docode過程中每一步得會累積誤差;\r\n\r\n\r\n\r\n積累的誤差如上圖所示.在這個背景下,為了改善這種情形原文作者提出了GEAR用來減少KV\r\ncache量化的估計誤差.\r\n深入分析GEAR細節\r\n前置知识\r\n\r\n基础量化方法\r\n\r\n比如说我们有一个tensor  作为输入,\r\n想要将这样一个输入的tensor做一个带宽(bandwidth)为b的量化操作,可以描述如下:\r\n\r\n其中  是指一个量化分组的size;\r\n通常 \r\n取得越小量化效果越好,但是与此同时g取得越多需要保存的缩放因子也越多会导致内存消耗变大.\r\n\r\nMHA 多头注意力机制\r\n\r\n关于多头注意力的分析前面的文章以及分析过不少了,这里仅给出形式化的公式:\r\n\r\nGEAR的總體框架\r\nGEAR的整體思路其實很簡單,主要可以描述為以下三步:\r\n\r\n首先對KV\r\ncache採用一個常規的量化方法(比如將全進度float16的kv值全部轉儲為int2的類型),但是這必然會導致精度的大幅降低.\r\n然后引入一个低秩矩阵来高效的估计量化之后的残差;\r\n最后再引入一个稀疏矩阵来补全一些异常值导致的极个别的大额误差;\r\n\r\n省流版:\r\n在原来粗暴量化的基础上,整体绝大部分的误差是通过引入一个低秩矩阵来解决的,而一些异常值是通过一个稀疏矩阵来恢复的;\r\n\r\n符号规定:\r\n\r\n量化之后的kv cache矩阵为 ; 上文提及的低秩矩阵记作\r\n;\r\n用于捕捉补偿少部分异常值的稀疏矩阵记作 ;\r\n\r\n基本策略:\r\n\r\n给定一个待处理的tensor \r\n,我们的策略就是上文提及的三种量化策略之后得到的三部分矩阵, 然后最小化\r\n\r\n和上述三部分的距离;所以实际上, 这个任务可以描述为:\r\n\r\n\r\n我们都知道过大或者过小的异常值会对量化过程的精度造成极大的影响,所以最佳的策略是在量化之前先进行一次异常值提取,\r\n具体而言:\r\n\r\n\r\n在异常值提取完成之后,再接着进行量化处理:\r\n\r\n这样的思路其实在之前早已被应用于LLM的权重量化上,\r\n但是相比于对于权重(weight)量化而言, kv cahce拥有更多的\r\n异常值(outliers),使得异常值提取的重要性更大了;\r\n\r\n提取完成异常值之后再进行低秩矩阵误差估计;\r\n\r\n根据上文的说法, 我们定义的低秩残差为 ;\r\n然后我们将上述低秩残差分作 \r\n个多头子矩阵, 其中 \r\n是第h个头的残差矩阵: \r\n设 \r\n的奇异值分解形式如 , 其中\r\n 是\r\n 的奇异值,  和  为对应的特征向量;\r\n\r\n\r\n\r\n附錄\r\n(a)理解低秩矩陣和稀疏矩陣\r\n低秩矩陣和稀疏矩陣\r\n的相同点在于都表明矩阵的信息冗余比较大.具体来说，稀疏意味着有很多零，即可以压缩；低秩意味着矩阵有很多行（列）是线性相关的.low\r\nrank matrix和稀疏矩陣各有各的用途.\r\n\r\n補充知識點1 稀疏表示!\r\n\r\n假設有維的n個輸入,m非常之大,我們想要一勞永逸,不想要存儲所有的m個向量,於是我們想要學習到一種表示:\r\n\r\n這裡的我們稱做字典,是輸入基於字典的稀疏表示法;是一個較小的值,第二個式子能夠保證矩陣是一個稀疏矩陣.尋求上式的最優解是一個NP-Hard問題,我們可以使用一些算法來快速地得到一些次優解.\r\n針對上述問題,我們可以先選取一組稀疏表示的初始解: ,其中是滿足上述第二個不等式約束的.\r\n然後的優化目標變成了:\r\n\r\n這裡存在兩個優化變量,一般的策略就是固定其中一個變量然後動態更新另外一個變量,下面以更新字典為例子.\r\n假設我們固定了稀疏表示,在此基礎上來逐列更新字典的第k列:\r\n\r\n上式中  被定義為殘差;此時最優化問題可以被描述為 \r\n,這顯然是一個最小二乘問題,可以直接用最小二乘法就可以解決這個問題.\r\n但是這裡仍然需要註意的問題是,我們不能直接使用進行求解,因為不加限製的求解時不能保證稀疏性.我們需要選取出中不為0的部分再進行迭代更新.就像下圖所展示的一樣:\r\n\r\n\r\n\r\n參考資料稀疏表示\r\n\r\n補充知識點2 低秩(low rank represent 低排名🐻‍❄️)表示!\r\n\r\n假設一個輸入信號由低秩矩陣和噪聲組成,即,为了還原低秩矩阵，求解如下最小化问题：\r\n\r\n然而,矩陣rank的計算和L0范數通常是非凸的,考慮到這點我們通常使用矩陣的核范數\r\n(矩陣奇異值的和) 和L1范數\r\n\r\n對上式進行鬆弛處理,\r\n\r\n從而得到一個凸優化問題.\r\n(b)稀疏子空間聚類(Sparse Subspace Clustering, SSC)\r\n稀疏子空間聚類問題(SCC)可以描述為: 假設有一組高維數據點的集合,其中,是高維空間中的點(这些点分布在\r\nK KK 个低维子空间上，每个子空间的维数远小于数据点的原始维度，即 d_k\r\n&lt;&lt; D ). 對於這一組數據我們期望尋找一組稀疏向量, 使得能夠被其他數據點的線性組合來逼近.\r\n和上面低秩表示一樣我們定義一個鬆弛化的SCC最小化函數\r\n\r\n上式意味著我們在整體數據集上為每一個數據點尋找一個盡可能稀疏的表述法則,從而將數據進行聚類.\r\n\r\n\r\n\r\n","categories":["学术"],"tags":["大模型压缩"]},{"title":"LLM剪枝-SparseGPT方法","url":"/post/20461be3.html","content":"'SparseGPT' one-shot\r\nPruning Strategy\r\n【论文地址】SparseGPT:\r\nMassive Language Models Can be Accurately Pruned in One-Shot\r\nSparseGPT简介\r\nSparseGPT是一种用于压缩Massive\r\nLLM的一次性（one-shot）、无须重训练（no need for\r\nretraining）的基于非结构化Pruning（剪枝）的模型压缩方法，发现了至少50%的稀疏性；\r\n\r\nSparseGPT提出的创新点何在？其实就是两点：ONE-SHOT\r\n&amp;&amp; NO RETRAINING;\r\n\r\n\r\n\r\n\r\n上图就是原来的模型减枝之后，我们仍然需要一个Sparse\r\nRetraining的过程来调整稀疏化之后的模型，SparseGPT提出的剪枝方法则是one-shot的，也就是无须后面retraining或者说调整的代价很小。\r\nSparseGPT的基本原理\r\n已有方法存在的问题：\r\n一般的模型减枝（Pruning）都包含两步——Mask Selection 和 weight\r\nrestruction。\r\n假设我们某一层的模型权重记作，输入记作，掩码矩阵记作，Sparsify之后的权重变成了，那么我们的最优化目标就变成了：\r\n\r\n但是因为这两部分会同时影响到上述最优化的结果，也有证明这是一个NP-hard问题，在巨大的模型面前解决这个问题是不现实的，我们需要另找办法。一种有效的方法就是根据一些显式的法则（比如直接根据权重来筛选）来实现直接给定一个MASK。然后接着做权重重建即可。\r\n根据上述分析和推导，我们的权重重建过程可以化为一个最小二乘法的最优化问题，形式通解可以描述为：\r\n\r\n我们不妨定义海森矩阵：\r\n\r\n这里面的指的是经过掩码的第行之后仍然存在的输入；是对应的权重；是第i行更新之后的权重。\r\n但是这样的方法仍然会存在很多问题：\r\n\r\n最重要的一点是：掩码每一行不同会导致不同的海森矩阵，导致计算量巨大。并且，计算矩阵的逆也十分消耗计算资源，就像下图所展示的这样。\r\n\r\n\r\n\r\n\r\n\r\n\r\n！素食剪切线警告！\r\n\r\n\r\n基于OBS思想的权重重建\r\n\r\n一种等价的迭代视角\r\n\r\n作者借鉴了Optimal\r\nBrain\r\nSurgery【OBS】（相关介绍见附录部分）中调整剩余权重来减少Pruning所减去当前权重影响的思想来对现有的方法进行改进。但是相比较于原来OBS更改全局参数的策略，SparseGPT则是使用一种更加高效的方法，每次只更新未被Pruning掉的部分；\r\n\r\n\r\n\r\n上图就是 SparseGPT\r\nPruning算法的可视化，每次对一列权重进行Pruning（白色的块是被减掉的），右侧深蓝色的块就会被参数更新来补偿修建错误。没被修改的块就不会对后续参数造成影响。\r\n工作亮点：\r\n\r\n1）海森矩阵的处理\r\n\r\n我们将输入的特征矩阵来进行编号，然后我们定义特征矩阵子集的简记方式：\r\n\r\n也就是说代表的是全集；是在的基础上删除序号为的元素.于是有：\r\n\r\n根据这篇论文的工作，我们选取依次少选取一行的优势就显示出来了，我们计算海森矩阵的逆可以根据上一步的逆很快的得到。\r\n设，那么在的时间之内我们可以计算出来：\r\n\r\n相比于原来的复杂度来计算一个矩阵的逆，现在充分利用已有信息可以在得到答案；\r\n\r\n2）计算复杂度分析\r\n\r\n通过上述的分析我们可以看到整体的计算开销主要由三部分组成：\r\n\r\n（a）初始Hessian矩阵的计算，其中n是输入特征向量的数量；\r\n（b）计算初始Hessian矩阵的逆；\r\n（c）然后对每一行使用权重重建\r\n\r\n总结：总共的时间复杂度就是.对于Transformer系列的模型，可以简化为的复杂度。\r\n自适应掩码选择\r\n在此之前，我们主要集中于谈论权重重建的细节，都是基于一个固定的Pruning\r\nMask来进行的权重重建。已有的Mask\r\nSelection方法可以参考基于幅度（magnitude）选取的方法；一个最直观地做法就是选取每一列值最小的的权重，这样可以直接构造出的稀疏性，但是这样对每一行来说是不平均的，特别是transformer这样的架构会有少量高敏感的权重。\r\n为了解决这一点所存在的问题，原文使用了一种叫做迭代阻塞（iterative\r\nblocking）的方法。相比于每次选取一列来做一个的pruning，文中每次选取来进行一个mask的选择，这样可以一定程度上避免这种pruning不均匀的现象；\r\n同时SparseGPT稀疏化方法同样可以适用于很多半结构化稀疏性，例如很有名的n:m细粒度结构化稀疏性，所谓N:M细粒度结构化稀疏即在M个连续的权重值中固定有N个非零值，其余元素均为零值，例如下图中N=2，M=4的N:M稀疏（2:4稀疏）。N:M稀疏的权重矩阵可以进行压缩存储，仅保留所有的非零元素，再辅以一个indices矩阵指示非零元素在原矩阵中的空间位置。从实验结果上来看，采用N:M细粒度结构化稀疏方案的模型在权重存储量和计算量大减的同时取得了比肩甚至超过稠密的原网络的推理精度。\r\n\r\n\r\n\r\n至此我们可以就更具给定的来确定，来完成Mask Selection的工作。\r\n整体的算法流程可以描述如下：\r\n\r\n\r\n\r\n实验验证部分\r\n\r\n硬件条件：单块80G A100显卡\r\n模型：BLOOM-176B 、OPT-175B系列模型（都是decoder-only的架构）\r\n衡量指标：Perplexity困惑度【见附录】\r\n测试数据集：raw-WiKiText2、PTB、C4\r\nSparsify时间：4h左右\r\n\r\n\r\nSparseGPT和幅度剪枝效果对比\r\n\r\n可以发现，SparseGPT算法能够提供更多的稀疏性：\r\n\r\n\r\n\r\n\r\n\r\n\r\n实验结果表明：相比于规模性对较小的视觉任务的模型，LLM在50%的sparsity的设定下，幅度减枝（magnitude\r\npruning）效果下降更加明显。但是对于SparseGPT而言，这种趋势相对平缓许多，对于2.7B的模型，Perplexity的下降已经接近一个百分点，到175B的模型时，下降已经接近于0；\r\n\r\n\r\n\r\n另外对于模型不同部位稀疏化影响敏感性的研究：\r\nlater layers are more sensitive than earlier\r\nones\r\n\r\n\r\n\r\nAppendix\r\n结构化剪枝VS非结构化剪枝技术\r\n常见的稀疏方式可分为结构化稀疏和非结构化稀疏。前者在某个特定维度（特征通道、卷积核等等）上对卷积、矩阵乘法做剪枝操作，然后生成一个更小的模型结构，这样可以复用已有的卷积、矩阵乘计算，无需特殊实现推理算子；后者以每一个参数为单元稀疏化，然而并不会改变参数矩阵的形状，只是变成了含有大量零值的稀疏矩阵，所以更依赖于推理库、硬件对于稀疏后矩阵运算的加速能力。\r\n半结构化剪枝是一种介于结构化剪枝和非结构化剪枝之间的剪枝方法，可以同时实现高精度和结构正则化。半结构化剪枝通常基于特定的模式进行剪枝，这些模式可以是任意的，但需要经过精心设计以减轻性能下降并实现特定的加速效果。半结构化剪枝可以被视为一种细粒度的结构化剪枝方法。\r\n参考阅读资料\r\nOBS：‘optimal brain surgery’\r\n的介绍：\r\nOBS这个名字很有意思，翻译过来就是最佳脑外科手术的意思；很贴合OBS对神经网络所做的事情：他将神经网络中一些不重要的权重、连接给切除之后，再对其他权重做调整来最小化减去神经的损失，OBS这个名字非常切合。\r\n我们考虑对神经网络的误差函数进行泰勒展开可以都得到：\r\n\r\n其中为Hessian矩阵，代表的模型当前的权重参数，代表训练误差。训练神经网络用任意的优化算法，该剪枝算法都是适用的。\r\n我们可以通过一些梯度下降优化算法来找到一个局部最小解，上述公式第一项就等于0，再忽略三阶无穷小，可以得到：\r\n\r\n这个时候我们开始对较小的权重进行减枝，比如我需要剪切权重中的第个元素那么我可以这样描述：\r\n\r\n其中为单位向量，只有在第项为1，其余项皆为0；这意味着什么？这意味着进行下一步更新的时候将被直接置于0！相当于完成了剪切；\r\n由上述的推导，我们现在将问题转化为了一个带约束条件的最优化问题，写出拉格朗日方程：\r\n\r\n解这个拉格朗日方程我们可以得到：\r\n\r\nPerplexity in LLM\r\n困惑度在LLM中的定义是：\r\n\r\n也就是说，在LLM中困惑度（Perplexity）被定义为一个token概率序列的指数平均负对数似然估计。\r\n困惑度越高说明每次产生下一个单词时候选词概率越平均或者说候选词更多。如果用困惑度来衡量一个LLM的表现，那么自然是困惑度越低LLM的表现越好。\r\n\r\n\r\n素食剪切线\r\n\r\n\r\n后记\r\n这篇文章真的很厉害，特别是每次OBS更新只选取部分子集进行更新，从而大量简化逆矩阵的运算量真的让人印象深刻！impressing！！！\r\n\r\n\r\n\r\n什么时候我才能写出这样的文章😶‍🌫️😶‍🌫️😶‍🌫️\r\n参考资料：\r\n\r\nhttps://www.cnblogs.com/sasasatori/p/17809829.html\r\n\r\n","categories":["学术"],"tags":["大模型压缩","剪枝","Pruning"]},{"title":"diffusion model 概述","url":"/post/aa10f68a.html","content":"最近想和大家讲讲diffusion model!\r\nDiffusion和图像生成的关系\r\n谈到diffusion model那么就不得不谈及AIGC.\r\n在过去几年里里，以Stable\r\nDiffusion为代表的AI图像/视频生成是世界上最为火热的AI方向之一. Stable\r\nDiffusion里的这个”Diffusion”是什么意思？其实，扩散模型(Diffusion\r\nModel)正是Stable Diffusion中负责生成图像的模型。想要理解Stable\r\nDiffusion的原理，就一定绕不过扩散模型的学习。\r\n在这篇文章里，我会由浅入深地对去噪扩散概率模型（Denoising Diffusion\r\nProbabilistic Models, DDPM）进行一个介绍。\r\n图像生成任务的解决\r\n相比其他AI任务，图像生成任务显然是一个更加困难的事情.\r\n比如人脸识别,序列预测...这一系列任务都有明确的训练集来给出or蕴含一个[标准答案].\r\n但是图像生成就没有,\r\n图像生成数据集里只有一些同类型图片，却没有指导AI如何画得更好的信息。\r\n过去的解决方案:\r\nGAN对抗生成模型\r\n\r\nGAN的原理简介\r\n\r\nGAN的主要结构，包括一个生成器G（Generator）和一个判别器D（Discriminator），整个训练过程，便是二者的对抗博弈：\r\n给定参考数据集,\r\n希望学习出使得最优化下面的函数:\r\n\r\n它的含义其实就是: 对于生成模型,\r\n输入是随机噪声 ,\r\n输出为  , 上面第二项就是使\r\n 越能够迷惑判别器越好. 判别器\r\n 输入真实数据 or  判别器需要对两者进行辨别.\r\n\r\n\r\n\r\n\r\nGAN存在的问题:\r\n\r\n(*) 无法用于解决离散型数据的生成问题,\r\n自然语言处理是一个很典型的例子:\r\n局部信息很重要：图像局部很多细节并不太影响人类的对图像的理解，只要整体到位就\r\nok，不然也犯不着 CNN 这么多 filter\r\n一层层给你过滤，你破坏少数像素点不影响人类理解。自然语言麻烦在于，在细微处修改一下，就变味了。比如“西瓜汁好喝！”，我稍微改一下“西瓜汁好喝吗？”，尾巴动一点，整个意思都变了。GAN\r\n局部信息重构到底是靠死记硬背训练样本，还是靠神经网络插值“生成”出来的？我反正不清楚，不管如何，针对自然语言这种细节敏感的问题，GAN\r\n不是一个首选方案，不然 n-gram 的 LM 也不会活到今天。\r\n\r\n解决办法(引入强化学习RL)\r\n\r\nrelated works SeqGAN\r\nto be continued\r\n\r\nVAE\r\n(Variational AutoEncoder) 变分推断模型\r\nVAE作为可以和GAN比肩的生成模型，融合了贝叶斯方法和深度学习的优势，拥有优雅的数学基础和简单易懂的架构以及令人满意的性能，其能提取disentangled\r\nlatent variable的特性也使得它比一般的生成模型具有更广泛的意义。\r\n\r\n关于Latent Variable(隐藏变量)的理解\r\n\r\n生成模型一般会生成多个种类的数据，比如说在手写数字生成中，我们总共有10个类别的数字要生成，这个时候latent\r\nvariable model就是一个很好的选择。\r\n为什么呢？举例来说，我们很容易能注意到相同类别的数据在不同维度之间是有依赖存在的，比如生成数字5的时候，如果左边已经生成了数字5的左半部分，那么右半部分就几乎可以确定是5的另一半了。\r\n\r\n\r\n\r\n因此一个好的想法是，生成模型在生成数字的时候有两个步骤，即(1)决定要生成什么数字，这个数字用一个被称为latent\r\nvariable的向量z来表示，(2)然后再根据z来直接生成相应的数字。用数学表达式来表示就是：\r\n\r\n\r\n问:那么现在的关键是关于Latent Variable  的 先验概率分布形式  如何取值?\r\n\r\n答:很简单,直接设定 \r\n满足标准高斯分布就行.\r\n因为任何复杂的分布都可以通过多层MLP映射成标准高斯分布.\r\n\r\n问: 如何训练一个VAE\r\n\r\n答: 最大化  即可;\r\n\r\n有了的先验分布知识,我们可以使用若干次采样来最大化似然函数\r\n\r\n即最大化 \r\n然而当是维度很高的高斯分布的时候,这种方法训练十分低效.\r\n我们需要注意到, 对于采样  所有的 \r\n其实都是几乎为0的. 换言之,绝大部分采样得到的的  对于目标函数  的贡献无足轻重.\r\n在换言之,我们只需要关注 \r\n更大的部分即可.\r\n那么问题来了, 怎么计算 \r\n的后验知识 ??????\r\n很难的!\r\n\r\n引入新的近似分布q\r\n\r\n直接计算后验分布 \r\n是极其困难的,我们需要引入一个近似分布 ;必须保证  和 \r\n的分布相似性.这里用KL散度来衡量:\r\n\r\n使用贝叶斯公式对上式化简化繁:\r\n\r\n于是:\r\n\r\n再度化简可以得到 \r\n\r\n注意到KL散度的非负性,于是有:\r\n\r\n\r\n\r\n\r\n\r\n","categories":["学术"],"tags":["生成式模型","diffusion model"]},{"title":"一个attention降秩理论的证明","url":"/post/d9fbe1c8.html","content":"Attention\r\nis not all you need？ 纯粹的注意力机制有什么问题？\r\n论文地址-&gt; pure\r\nattention loses rank doubly exponentially with depth &lt;-\r\n简介\r\n原文链接如上所示，论文开门见山的提出来一个新观点：纯粹的注意力机制会导致矩阵的秩指数级别的下降；论文标题也很有意思Attention is not all you need，则是与LLM的开山之作Attention is all you need相呼应，这篇文章看似在挑战attention机制，实际上是在从一个全新的角度来阐述为什么attention为什么会表现优异。\r\n回忆一下multi-head attention机制的细节：\r\n一个通俗且不严谨的科普（为了不懂NLP的观众）：在自然语言处理过程中，我们将每个word编码为一个vector（我们认为这个向量几何意义上会反映单词的语义信息，你可以理解为比如原神和崩坏铁道的向量表示相对距离更近、而和明日方舟更远，因为后者非米哈游产），从而单词组成的句子就会变成一个matrix。自然语言处理中有很多模块负责理解并处理这些matrix.\r\n\r\n\r\n\r\n上图就是一个多头注意力机制的原理图示。我们先尝试从数学的角度建模这个模块（真的很好理解、初中数学水平）：\r\n我们考虑一个输入是一个形如的输入。那么我们\r\n第h个注意力头的输出可以描述为：\r\n\r\n其中，是形如的value矩阵，是：\r\n\r\n注意：这里的softmax操作是对矩阵的每一行进行的，、的形状都是，于是最后的输出是的形状，并且根据softmax的运算性质每行加上相同的值不会影响最终的输出，所以上述还可以接着作上述第二个等号的化简。如果你对这其中的某些步骤存在疑问可以关注后续会出一篇深度学习入门的博客文章。\r\n最后我们将多个头的注意力加权合并便得到最终这一层attention的输出：\r\n\r\n其中，;\r\n我们先忽略上面的偏置项，那我们一个由多层纯注意力层堆积而成的神经网络的最终输出可以描述为：\r\n\r\n其实形象地，我们不难发现上述式子展开后的每一项都对应着多层注意力网络的一条可行路径（见下图。\r\n\r\n\r\n\r\n相信看完上述的描述之后，你肯定对线性LLM流行的多头注意力机制有了一个较为细致的了解了吧（不确信\r\npure attention collapse rank\r\n现象？\r\n注意力降智降秩机制其实描述的是这样的事情：随着大模型层数的增加，如果我们简单的使用注意力层的堆叠，那么最后面的输出矩阵每行的向量指数级别的倾向于一致，也就是矩阵被降秩了！！！这对于LLM来说是一个非常糟糕的现象，毕竟谁都不希望看到自己的Chatbot只会说\"啊对对对对对、啊错错错错错错错\"吧。后面两个小节我们会分别从数学上证明这种现象和提出这种现象的解决方法\r\nMathematics\r\nProof of Rank-Collapsing in pure ATTETION\r\n\r\n终于来到喜闻乐见的数学拷打时间了\r\n\r\n首先我们需要先定义一个残差，来衡量一个矩阵和秩①矩阵的相似程度，我们定义的残差如下：\r\n，\r\n不难验证，一个矩阵如果越越接近于秩①矩阵的话残差是越小的。并且从残差的定义来看（的任意性），偏置项是不会影响残差大小的。\r\n先来看单个头的单层注意力的情况\r\n对于单个头的一层注意力\r\n\r\n我们先来证明如下结论：\r\n\r\n其中是一个常量；\r\n由之前(2)式子的推导我们有：\r\n\r\n我们引入记号，其中：\r\n\r\n从而我们的注意力矩阵可以改写为：\r\n\r\n我们再一次使用的平移不变的运算特性，可以得到：\r\n$$  $$\r\n我们设、, 那么我们有：\r\n（这一步使用了一行加和等于的性质）（操蛋，这一步我没太看懂😤\r\n$D矩阵的相关附录见Appendix的part1；\r\n😤😤😤不等式那一步我也没太看懂作者的意图，D是啥东西作者也没提，矩阵直接比较大小好像就是每个ij位置的元素对应比较。先硬着头皮看下去罢😤😤😤\r\n从而我们有：\r\n\r\n在此处;我们再来寻找上述不等式右边的界，考虑范数我们有：\r\n\r\n在上述步骤中我们使用了以及的性质。从而不难得到的结论。\r\n通过类似的分析过程我们同样可以得到.\r\n结合上述两步推导过程我们有：\r\n\r\nAppendix\r\nLemma-1\r\n引理1：设是矩阵的row-stochastic matrix，是矩阵的row-stochastic matrix.(for\r\nsome matrix  with )，有：\r\n\r\n成立，其中对角矩阵满足.（这里的我猜测就是就是第i个元素为1的向量...\r\n\r\n剪切线，启动！\r\n\r\n\r\n后记\r\n\r\n这一篇论文过于理论化，Mr.Xau抽空前前后后一个星期才看完；内容太抽象导致本人也变得抽象起来了belike：\r\n\r\n\r\n","categories":["学术"],"tags":["数学理论"]},{"title":"强化学习基础","url":"/post/9109d8f5.html","content":"强化学习入门教程\r\n视频教程链接\r\n图文教程链接\r\n名词解释\r\n\r\n价值函数\r\n\r\n在马尔可夫奖励过程中，一个状态的期望回报（即从这个状态出发的未来累积奖励的期望）被称为这个状态的价值（value）。所有状态的价值就组成了价值函数（value\r\nfunction）. 于是我们可以将价值函数形式化的定义为:\r\n\r\n展开可以得到:\r\n\r\n根据马尔科夫概率转移过程我们可以将上面的式子改写为:\r\n\r\n\r\n贝尔曼方程(Bellman equation)\r\n\r\n若一个马尔科夫奖励过程一共有个状态,即:\r\n\r\n将所有状态的价值表同样表示为一个向量的形式:\r\n\r\n同理将奖励函数写成一个列向量:\r\n\r\n于是我们可以将Bellman方程写为:\r\n\r\n简记为: \r\n可以直接求得解析解:\r\n\r\n上述计算式的计算复杂度是,对于大规模的马尔科夫奖励过程并不现实;解较大规模的马尔可夫奖励过程中的价值函数时，可以使用动态规划（dynamic\r\nprogramming）算法、蒙特卡洛方法（Monte-Carlo\r\nmethod）和时序差分（temporal difference）. 这些算法都将在后续计算.\r\n\r\n马尔科夫决策\r\n\r\n之前讨论到的马尔可夫过程和马尔可夫奖励过程都是自发改变的随机过程；而如果有一个外界的“刺激”来共同改变这个随机过程，就有了马尔可夫决策过程（Markov\r\ndecision\r\nprocess，MDP）。我们将这个来自外界的刺激称为智能体（agent）的动作.\r\nMDP可以由于一个五元组 \r\n来描述;相比于...\r\nto be continue\r\n经典强化学习策略\r\nREINFORCE-基于策略梯度的强化学习算法\r\n我们记一个马尔科夫序列的反馈值为:\r\n\r\n在策略梯度中，策略经常用一个带参数集的函数表示:.由策略决定的目标函数可以定义为:\r\n\r\n使用梯度上升策略来更新策略参数\r\n\r\n其中:\r\n\r\n而且其中又满足:\r\n\r\n对上式对数求导:\r\n\r\n于是有:\r\n\r\nREINFORCE算法中的是基于蒙特卡洛采样的策略梯度方法采样得到的一个轨迹。也就是agent的采样策略是从开始状态一直到最终状态，是一个完整的轨迹。\r\n\r\n\r\n\r\nActor-Critic 算法\r\n在上述REINFORCE算法里面我们可以将简记为:\r\n\r\n其中可以取很多形式\r\n\r\n,\r\n一条采样的总回报;\r\n,\r\n采取动作之后的回报;\r\n\r\n, 基准线版本的改进;\r\n\r\n,时序差分残差;\r\n\r\n这个可以是任何我们想要给定策略参数想要达到的最大化或最小化的效应,\r\n比如...\r\n提到 REINFORCE\r\n通过蒙特卡洛采样的方法对策略梯度的估计是无偏的，但是方差非常大。我们可以用上述形式引入基线函数（baseline\r\nfunction）来减小方差。REINFORCE\r\n算法基于蒙特卡洛采样，只能在序列结束后进行更新，这同时也要求任务具有有限的步数，而\r\nActor-Critic\r\n算法则可以在每一步之后都进行更新，并且不对任务的步数做限制。\r\nActor-Critic 算法顾名思义就是将强化学习算法分为两部分:\r\n\r\nCritic 要做的是通过 Actor\r\n与环境交互收集的数据学习一个价值函数，这个价值函数会用于判断在当前状态什么动作是好的，什么动作不是好的，进而帮助\r\nActor 进行策略更新。\r\n\r\n对于单个数据定义的如下的价值函数的损失函数:\r\n\r\n和DQN中一样,我们将上述视作我们的差分目标,不会产生梯度来更新价值函数.\r\n于是价值函数的梯度为:\r\n\r\n\r\nActor 要做的是与环境交互，并在 Critic\r\n价值函数的指导下用策略梯度学习一个更好的策略。\r\n\r\n所以我们的Actor-Critic算法可以描述为:\r\n\r\n初始化策略网格参数以及价值网格参数\r\n使用当前的动作策略采样agent轨迹得到: \r\n为每一步数据计算\r\n更新价值网格参数\r\n根据更新之后的价值网格参数来更新策略网格参数\r\n\r\nTRPO算法\r\n之前提到的两种基于策略的算法,在实际训练过程中极易出现训练不稳定的情况;\r\n具体回顾一下基于策略的算法策略:\r\n假设是策略的参数,定义价值函数:\r\n\r\n基于策略的方法的目标就是找到最优的;\r\n但是这种算法有一个明显的缺点：当策略网络是深度模型时，沿着策略梯度更新参数，很有可能由于步长太长，策略突然显著变差，进而影响训练效果。\r\n针对以上问题，我们考虑在更新时找到一块信任区域（trust region），在这个区域上更新策略时能够得到某种策略性能的安全性保证，这就是信任区域策略优化（trust\r\nregion policy optimization，TRPO）算法的主要思想。\r\n具体来说考虑到初始状态的分布和我们的策略无关,所以我们的目标函数可以写做:\r\n\r\n基于上述推导,我们可以得到新旧策略之间目标函数的差异:\r\n\r\n如若定义残差函数:\r\n\r\n注意看的第一项取决于新策略的状态访问分布,而后面两项取决于原始策略的状态访问分布;但是当我们策略更新步幅很小的时候,和的状态访问分布可以近似相等;\r\n我们定义:\r\n\r\n于是我们的优化目标为:\r\n\r\n进一步处理:\r\n\r\n此外为了保证新旧策略足够接近，TRPO\r\n使用了库尔贝克-莱布勒（Kullback-Leibler，KL）散度来衡量策略之间的距离.于是整体的优化公式修改为:\r\n\r\n这里的不等式约束定义了策略空间中的一个 KL\r\n球，被称为信任区域。在这个区域中，可以认为当前学习策略和环境交互的状态分布与上一轮策略最后采样的状态分布一致，进而可以基于一步行动的重要性采样方法使当前学习策略稳定提升。\r\n\r\n\r\n\r\nPPO算法\r\n介绍的 TRPO\r\n算法在很多场景上的应用都很成功，但是我们也发现它的计算过程非常复杂，每一步更新的运算量非常大。于是，TRPO\r\n算法的改进版——PPO 算法在 2017 年被提出，PPO 基于 TRPO\r\n的思想，但是其算法实现更加简单。\r\n让我们回忆一下TRPO的优化目标:\r\n\r\nTRPO 使用泰勒展开近似、共轭梯度、线性搜索等方法直接求解。但 PPO\r\n用了一些相对简单的方法来求解。具体来说，PPO 有两种形式，一是\r\nPPO-惩罚，二是 PPO-截断，我们接下来对这两种形式进行介绍。\r\n\r\nPPO-惩罚算法\r\n\r\nPPO-惩罚（PPO-Penalty）用拉格朗日乘数法直接将 KL\r\n散度的限制放进了目标函数中，这就变成了一个无约束的优化问题，在迭代的过程中不断更新\r\nKL 散度前的系数。即：\r\n\r\n设, 那么的更新规则如下:\r\n\r\n如果,那么.\r\n如果,那么.\r\n否则.\r\n\r\n其中，是事先设定的一个超参数，用于限制学习策略和之前一轮策略的差距。\r\n\r\nPPO截断\r\n\r\nPPO 的另一种形式\r\nPPO-截断（PPO-Clip）更加直接，它在目标函数中进行限制，以保证新的参数和旧的参数的差距不会太大，即：\r\n\r\n\r\n\r\n\r\n","categories":["学术"],"tags":["数学理论","强化学习","算法基础"]},{"title":"图论？绸带？算法？","url":"/post/36e56330.html","content":"记录最近遇到的一个关于排列与图论（？的算法题\r\n【题目简述】\r\n定义一个的排列为简洁，当且仅当均满足：\r\n现在给你一个任意的的排列,每一秒你可以交换其中任意两个元素的位置。试在最少的时间内把这个排列变得简洁，并且给出最少的步数。\r\n-&gt;【原题链接】&lt;-\r\n\r\n\r\n\r\n一些分析\r\n图从何而来？\r\n由于这是一个的排列，所以每个元素都会且只会出现一个，同理作为下标也只会出现一次；基于这点启发我们可以构造这样一个图：\r\n\r\n这个图有编号依次为的n个节点，如果有那么我们就添加一条从到的有向边。\r\n\r\n因为每个元素都会且只会出现一个，同理作为下标也只会出现一次，所以不难有每个点都只有一个入度和一个出度，也就是说这个这个图会由一系列简单的环组成。可以参考下面这个例子：\r\n\r\n\r\n\r\n\r\n事已至此，我们不难发现：在图中代表的就是一个点到自己的自环；\r\n对应的就是只有两个点彼此连接的环；所以我们的目标就变成了找到所有大于两个元素的环，然后把他们拆解为一系列两点环或者自环即可；\r\n\r\n一次交换操作会对图产生什么影响？\r\n我们还是按照上面的例子来做一个说明，如果我们对一个元素个数大于3的环做一次交换操作，那么我们可以做到从这个环里面拆出两点组成一个小环（这个小环）就对于情形2；最后面可能剩下1个或2个点都是能够满足条件的。\r\n所以我们的策略已经呼之欲出力！找到所有元素个数为m大于2的环，把他交换次即可；我们算法层面需要实现的就是找到所有环即可，不做赘述，请看代码；\r\n\r\n\r\n\r\n#include &lt;bits/stdc++.h&gt;using namespace\tstd;#define MAX_LEN 1000005 int\tmain(void){\tint case_num, array_length, arr[MAX_LEN];\tcin &gt;&gt; case_num; \tfor (int ii = 0; ii &lt; case_num; ii++)\t{\t\tcin &gt;&gt; array_length;\t\tbool used[array_length];\t\tfill(used, used + array_length, false);\t\tint ans = 0;\t\tvector&lt;int&gt; loops;\t\tfor (int jj = 0; jj &lt; array_length; jj++)\t\t{\t\t\tcin &gt;&gt; arr[jj];\t\t} \t\tint turns = 0;\t\tint start;\t\tfor (int kk = 0; kk &lt; array_length; kk++)\t\t{\t\t\tturns = 0;\t\t\tif (used[kk])\t\t\t{\t\t\t\tcontinue ;\t\t\t}\t\t\telse\t\t\t{\t\t\t\tused[kk] = true;\t\t\t\tturns++;\t\t\t\tstart = arr[kk] - 1; \t\t\t\twhile (!used[start])\t\t\t\t{\t\t\t\t\tused[start] = true;\t\t\t\t\tturns++;\t\t\t\t\tstart = arr[start] - 1;\t\t\t\t}\t\t\t\tloops.push_back(turns);\t\t\t}\t\t}\t\tfor (int i : loops)\t\t{\t\t\tans += (i - 1) / 2;\t\t\t// cout &lt;&lt; \"loops has \" &lt;&lt; i &lt;&lt; \" nodes\\n\";\t\t} \t\tcout &lt;&lt; ans &lt;&lt; endl;\t} \treturn (0);}\r\n\r\n\r\n\r\n\r\nAccepted!!!\r\n\r\n\r\n\r\n\r\n","categories":["算法"],"tags":["刷题记录"]}]